# Generated by Django 4.1 on 2023-09-18 13:52

import django.contrib.auth.validators
from django.db import migrations, models
import functools
import phonenumber_field.modelfields
import alltime11.validators
import users.validators
import utils.shortuuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('uid', models.CharField(db_index=True, default=functools.partial(utils.shortuuid.generate, *(), **{'prefix': 'S'}), max_length=20, unique=True)),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(db_index=True, max_length=15, region=None, unique=True)),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 50 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=50, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('name', models.CharField(max_length=100, verbose_name='name')),
                ('dob', models.DateField(null=True, verbose_name='dob')),
                ('email', models.EmailField(max_length=254, verbose_name='email address')),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other')], default='M', max_length=1)),
                ('image_url', models.CharField(max_length=200, null=True)),
                ('address1', models.CharField(max_length=100, null=True)),
                ('address2', models.CharField(max_length=100, null=True)),
                ('city', models.CharField(max_length=30, null=True)),
                ('state_code', models.CharField(max_length=5, null=True, validators=[users.validators.validate_state_code])),
                ('pincode', models.CharField(max_length=20, null=True, validators=[users.validators.validate_pincode])),
                ('country', models.CharField(max_length=2, null=True, validators=[alltime11.validators.validate_country_code])),
                ('referral_code', models.CharField(default=functools.partial(utils.shortuuid.generate, *(), **{'max_length': 6, 'prefix': 'R'}), max_length=6, unique=True)),
                ('via_referral_code', models.CharField(max_length=6, null=True)),
                ('is_email_verified', models.BooleanField(default=False, help_text="Designates whether the user's email is verified or not", verbose_name='email_verified')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates the type of user - normal, staff, etc.', verbose_name='is_staff')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('is_blocked', models.BooleanField(default=False, help_text='Designates whether this user has been debarred from using the platform', verbose_name='blocked')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
